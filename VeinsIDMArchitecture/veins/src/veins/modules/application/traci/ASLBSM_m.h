//
// Generated file, do not edit! Created by nedtool 5.5 from veins/modules/application/traci/ASLBSM.msg.
//

#ifndef __VEINS_ASLBSM_M_H
#define __VEINS_ASLBSM_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif

// cplusplus {{
#include "veins/base/utils/Coord.h"
#include "veins/base/utils/Heading.h"
#include "veins/modules/messages/BaseFrame1609_4_m.h"
#include "veins/modules/messages/DemoSafetyMessage_m.h"
#include "veins/base/utils/SimpleAddress.h"
// }}


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/ASLBSM.msg:39</tt> by nedtool.
 * <pre>
 * packet ASLBSM extends DemoSafetyMessage
 * {
 *     string demoData;
 *     LAddress::L2Type senderAddress = -1;
 *     string vehId = "";
 *     int serial = 0;
 *     Heading heading;
 *     Coord direction;
 * }
 * </pre>
 */
class VEINS_API ASLBSM : public ::veins::DemoSafetyMessage
{
  protected:
    ::omnetpp::opp_string demoData;
    LAddress::L2Type senderAddress;
    ::omnetpp::opp_string vehId;
    int serial;
    Heading heading;
    Coord direction;

  private:
    void copy(const ASLBSM& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ASLBSM&);

  public:
    ASLBSM(const char *name=nullptr, short kind=0);
    ASLBSM(const ASLBSM& other);
    virtual ~ASLBSM();
    ASLBSM& operator=(const ASLBSM& other);
    virtual ASLBSM *dup() const override {return new ASLBSM(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getDemoData() const;
    virtual void setDemoData(const char * demoData);
    virtual LAddress::L2Type& getSenderAddress();
    virtual const LAddress::L2Type& getSenderAddress() const {return const_cast<ASLBSM*>(this)->getSenderAddress();}
    virtual void setSenderAddress(const LAddress::L2Type& senderAddress);
    virtual const char * getVehId() const;
    virtual void setVehId(const char * vehId);
    virtual int getSerial() const;
    virtual void setSerial(int serial);
    virtual Heading& getHeading();
    virtual const Heading& getHeading() const {return const_cast<ASLBSM*>(this)->getHeading();}
    virtual void setHeading(const Heading& heading);
    virtual Coord& getDirection();
    virtual const Coord& getDirection() const {return const_cast<ASLBSM*>(this)->getDirection();}
    virtual void setDirection(const Coord& direction);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ASLBSM& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ASLBSM& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_ASLBSM_M_H

