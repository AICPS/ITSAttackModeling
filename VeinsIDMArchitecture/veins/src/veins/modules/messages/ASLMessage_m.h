//
// Generated file, do not edit! Created by nedtool 5.5 from veins/modules/messages/ASLMessage.msg.
//

#ifndef __ASLMESSAGE_H
#define __ASLMESSAGE_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif



// cplusplus {{
#include "veins/base/utils/SimpleAddress.h"
#include "veins/modules/messages/BaseFrame1609_4_m.h"
// }}
namespace veins {
/**
 * Class generated from <tt>veins/modules/messages/ASLMessage.msg:26</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet ASLMessage extends BaseFrame1609_4
 * {
 *     double aslSpeed = 0.0;
 *     LAddress::L2Type recipientAddress = -1;
 * }
 * </pre>
 */
class VEINS_API ASLMessage : public ::veins::BaseFrame1609_4
{
  protected:
    double aslSpeed;
    LAddress::L2Type recipientAddress;

  private:
    void copy(const ASLMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ASLMessage&);

  public:
    ASLMessage(const char *name=nullptr, short kind=0);
    ASLMessage(const ASLMessage& other);
    virtual ~ASLMessage();
    ASLMessage& operator=(const ASLMessage& other);
    virtual ASLMessage *dup() const override {return new ASLMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getAslSpeed() const;
    virtual void setAslSpeed(double aslSpeed);
    virtual LAddress::L2Type& getRecipientAddress();
    virtual const LAddress::L2Type& getRecipientAddress() const {return const_cast<ASLMessage*>(this)->getRecipientAddress();}
    virtual void setRecipientAddress(const LAddress::L2Type& recipientAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ASLMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ASLMessage& obj) {obj.parsimUnpack(b);}
}

#endif // ifndef __ASLMESSAGE_M_H

